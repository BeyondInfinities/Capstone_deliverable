!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";function r(t,e){return e=e||{},new Promise((function(n,r){var o=new XMLHttpRequest,i=[],s={};for(var a in o.open(e.method||"get",t,!0),o.onload=function(){o.getAllResponseHeaders().toLowerCase().replace(/^(.+?):/gm,(function(t,e){s[e]||i.push(s[e]=e)})),n(function t(){return{ok:2==(o.status/100|0),statusText:o.statusText,status:o.status,url:o.responseURL,text:function(){return Promise.resolve(o.responseText)},json:function(){return Promise.resolve(o.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([o.response]))},clone:t,headers:{keys:function(){return i},entries:function(){return i.map((function(t){return[t,o.getResponseHeader(t)]}))},get:function(t){return o.getResponseHeader(t)},has:function(t){return null!=o.getResponseHeader(t)}}}}())},o.onerror=r,o.withCredentials="include"==e.credentials,e.headers)o.setRequestHeader(a,e.headers[a]);o.send(e.body||null)}))}n.r(e),n.d(e,"default",(function(){return r}))},function(t,e,n){t.exports=self.fetch||(self.fetch=n(0).default||n(0))},function(t,e,n){"use strict";function r(){}n.r(e);function o(t){return t()}function i(){return Object.create(null)}function s(t){t.forEach(o)}function a(t){return"function"==typeof t}function l(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function u(t){return 0===Object.keys(t).length}new Set;let c=!1;function d(t,e){t.appendChild(e)}function f(t,e,n){const r=h(t);if(!r.getElementById(e)){const t=b("style");t.id=e,t.textContent=n,p(r,t)}}function h(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function p(t,e){return d(t.head||t,e),e.sheet}function m(t,e,n){t.insertBefore(e,n||null)}function g(t){t.parentNode&&t.parentNode.removeChild(t)}function v(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function b(t){return document.createElement(t)}function y(t){return document.createTextNode(t)}function x(){return y(" ")}function w(){return y("")}function k(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function $(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function _(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function P(t,e){t.value=null==e?"":e}function j(t,e){for(let n=0;n<t.options.length;n+=1){const r=t.options[n];if(r.__value===e)return void(r.selected=!0)}t.selectedIndex=-1}function C(t){const e=t.querySelector(":checked")||t.options[0];return e&&e.__value}new Map;let T;function S(t){T=t}const E=[],q=[],A=[],O=[],M=Promise.resolve();let B=!1;function N(){B||(B=!0,M.then(z))}function R(t){A.push(t)}const K=new Set;let L=0;function z(){if(0!==L)return;const t=T;do{try{for(;L<E.length;){const t=E[L];L++,S(t),I(t.$$)}}catch(t){throw E.length=0,L=0,t}for(S(null),E.length=0,L=0;q.length;)q.pop()();for(let t=0;t<A.length;t+=1){const e=A[t];K.has(e)||(K.add(e),e())}A.length=0}while(E.length);for(;O.length;)O.pop()();B=!1,K.clear(),S(t)}function I(t){if(null!==t.fragment){t.update(),s(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(R)}}const U=new Set;function D(t,e){t&&t.i&&(U.delete(t),t.i(e))}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","inert","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let H;function F(t,e){const n=t.$$;null!==n.fragment&&(s(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function G(t,e,n,l,u,d,f,h=[-1]){const p=T;S(t);const m=t.$$={fragment:null,ctx:[],props:d,update:r,not_equal:u,bound:i(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(p?p.$$.context:[])),callbacks:i(),dirty:h,skip_bound:!1,root:e.target||p.$$.root};f&&f(m.root);let v=!1;if(m.ctx=n?n(t,e.props||{},(e,n,...r)=>{const o=r.length?r[0]:n;return m.ctx&&u(m.ctx[e],m.ctx[e]=o)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](o),v&&function(t,e){-1===t.$$.dirty[0]&&(E.push(t),N(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],m.update(),v=!0,s(m.before_update),m.fragment=!!l&&l(m.ctx),e.target){if(e.hydrate){c=!0;const t=(b=e.target,Array.from(b.childNodes));m.fragment&&m.fragment.l(t),t.forEach(g)}else m.fragment&&m.fragment.c();e.intro&&D(t.$$.fragment),function(t,e,n,r){const{fragment:i,after_update:l}=t.$$;i&&i.m(e,n),r||R(()=>{const e=t.$$.on_mount.map(o).filter(a);t.$$.on_destroy?t.$$.on_destroy.push(...e):s(e),t.$$.on_mount=[]}),l.forEach(R)}(t,e.target,e.anchor,e.customElement),c=!1,z()}var b;S(p)}"function"==typeof HTMLElement&&(H=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(o).filter(a);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){s(this.$$.on_disconnect)}$destroy(){F(this,1),this.$destroy=r}$on(t,e){if(!a(e))return r;const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!u(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class J{$destroy(){F(this,1),this.$destroy=r}$on(t,e){if(!a(e))return r;const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!u(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function Q(t){f(t,"svelte-q59y6","@media(max-width: 1000px){d-contents{justify-self:start;align-self:start;padding-bottom:0.5em;margin-bottom:1em;padding-left:0.25em;border-bottom:1px solid rgba(0, 0, 0, 0.1);border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgba(0, 0, 0, 0.1)}}@media(min-width: 1000px){d-contents{align-self:start;grid-column-start:1;grid-column-end:4;justify-self:end;padding-right:3em;padding-left:2em;border-right:1px solid rgba(0, 0, 0, 0.1);border-right-width:1px;border-right-style:solid;border-right-color:rgba(0, 0, 0, 0.1)}}@media(min-width: 1180px){d-contents{grid-column-start:1;grid-column-end:4;justify-self:end;padding-right:3em;padding-left:2em;border-right:1px solid rgba(0, 0, 0, 0.1);border-right-width:1px;border-right-style:solid;border-right-color:rgba(0, 0, 0, 0.1)}}d-contents nav h3{margin-top:0;margin-bottom:1em}d-contents nav a{color:rgba(0, 0, 0, 0.8);border-bottom:none;text-decoration:none}d-contents li{list-style-type:none}d-contents ul{padding-left:1em}d-contents nav ul li{margin-bottom:.25em}d-contents nav a:hover{text-decoration:underline solid rgba(0, 0, 0, 0.6)}d-contents nav ul{margin-top:0;margin-bottom:6px}d-contents nav>div{display:block;outline:none;margin-bottom:0.5em}d-contents nav>div>a{font-size:13px;font-weight:600}d-contents nav>div>a{font-size:13px;font-weight:600}d-contents nav>div>a:hover,\n    d-contents nav>ul>li>a:hover{text-decoration:none}")}function V(t){let e;return{c(){e=b("nav"),e.innerHTML='<h3>Contents</h3> \n    <div><a href="#abstract">Abstract</a></div> \n    <div><a href="#introduction">Introduction</a></div> \n    <div><a href="#understanding-culture">Understanding Culture</a></div> \n    <ul><li><a href="#considering-multilingual-speakers">Considering multilingual speakers</a></li> \n      <li><a href="#considering-food">Considering Food</a></li> \n      <li><a href="#considering-religion">Considering religion</a></li> \n      <li><a href="#considering-country">Considering country</a></li></ul> \n    <div><a href="#understanding-bert">Understanding BERT</a></div> \n    <ul><li><a href="#21-introduction-to-bert">Introduction to BERT</a></li> \n        <li><a href="#22-input">Input</a></li> \n        <li><a href="#23-the-model">The model</a></li> \n        <li><a href="#24-output">Output</a></li></ul> \n    <div><a href="#section-3-literature-review">Literature review</a></div> \n    <ul><li><a href="#31-using-word-embeddings-to-determine-bias">Using word embeddings to determine bias</a></li> \n        <li><a href="#32-performing-bias-measurement-on-the-output">Performing bias measurement on the output</a></li> \n        <li><a href="#33-findings-summary">Findings Summary</a></li></ul> \n    <div><a href="#section-4--bias-test-for-multiple-cultural-elements-using-modified-categorical-bias-score">Bias test</a></div> \n    <ul><li><a href="#section-41-introduction">Introduction</a></li> \n        <li><a href="#making-systems-playful">Bias measurement on the output</a></li> \n        <li><a href="#section-43-bias-for-individual-characteristics">Bias for interaction between characteristics</a></li> \n        <li><a href="#section-43-bias-for-interaction-between-characteristics">The limitations of our approach</a></li></ul> \n      <div><a href="#appendix---a-gathering-data">Appendices</a></div>',$(e,"class","l-text toc figcaption")},m(t,n){m(t,e,n)},p:r,i:r,o:r,d(t){t&&g(e)}}}var W=class extends J{constructor(t){super(),G(this,t,null,V,l,{},Q)}},Z=n(1),X=n.n(Z);function Y(){return(Y=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var tt=["model"],et=function(){function t(t,e){void 0===e&&(e={}),this.apiKey=void 0,this.defaultOptions=void 0,this.apiKey=t,this.defaultOptions=e}var e=t.prototype;return e.fillMask=function(t,e){try{return Promise.resolve(this.request(t,e))}catch(t){return Promise.reject(t)}},e.summarization=function(t,e){try{return Promise.resolve(this.request(t,e)).then((function(t){return null==t?void 0:t[0]}))}catch(t){return Promise.reject(t)}},e.questionAnswer=function(t,e){try{return Promise.resolve(this.request(t,e))}catch(t){return Promise.reject(t)}},e.tableQuestionAnswer=function(t,e){try{return Promise.resolve(this.request(t,e))}catch(t){return Promise.reject(t)}},e.textClassification=function(t,e){try{return Promise.resolve(this.request(t,e)).then((function(t){return null==t?void 0:t[0]}))}catch(t){return Promise.reject(t)}},e.textGeneration=function(t,e){try{return Promise.resolve(this.request(t,e)).then((function(t){return null==t?void 0:t[0]}))}catch(t){return Promise.reject(t)}},e.tokenClassification=function(e,n){try{var r=t.toArray;return Promise.resolve(this.request(e,n)).then((function(e){return r.call(t,e)}))}catch(e){return Promise.reject(e)}},e.translation=function(t,e){try{return Promise.resolve(this.request(t,e)).then((function(t){return null==t?void 0:t[0]}))}catch(t){return Promise.reject(t)}},e.zeroShotClassification=function(e,n){try{var r=t.toArray;return Promise.resolve(this.request(e,n)).then((function(e){return r.call(t,e)}))}catch(e){return Promise.reject(e)}},e.conversational=function(t,e){try{return Promise.resolve(this.request(t,e))}catch(t){return Promise.reject(t)}},e.featureExtraction=function(t,e){try{return Promise.resolve(this.request(t,e))}catch(t){return Promise.reject(t)}},e.automaticSpeechRecognition=function(t,e){try{return Promise.resolve(this.request(t,Y({},e,{binary:!0})))}catch(t){return Promise.reject(t)}},e.audioClassification=function(t,e){try{return Promise.resolve(this.request(t,Y({},e,{binary:!0})))}catch(t){return Promise.reject(t)}},e.imageClassification=function(t,e){try{return Promise.resolve(this.request(t,Y({},e,{binary:!0})))}catch(t){return Promise.reject(t)}},e.objectDetection=function(t,e){try{return Promise.resolve(this.request(t,Y({},e,{binary:!0})))}catch(t){return Promise.reject(t)}},e.imageSegmentation=function(t,e){try{return Promise.resolve(this.request(t,Y({},e,{binary:!0})))}catch(t){return Promise.reject(t)}},e.request=function(t,e){try{var n=this,r=Y({},n.defaultOptions,e),o=t.model,i=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)e.indexOf(n=i[r])>=0||(o[n]=t[n]);return o}(t,tt);return Promise.resolve(X()("https://api-inference.huggingface.co/models/"+o,{headers:{Authorization:"Bearer "+n.apiKey},method:"POST",body:null!=e&&e.binary?t.data:JSON.stringify(Y({},i,{options:r}))})).then((function(e){return!1===r.retry_on_error||503!==e.status||r.wait_for_model?Promise.resolve(e.json()).then((function(t){if(t.error)throw new Error(t.error);return t})):n.request(t,Y({},r,{wait_for_model:!0}))}))}catch(t){return Promise.reject(t)}},t.toArray=function(t){return Array.isArray(t)?t:[t]},t}();function nt(t,e,n){const r=t.slice();return r[5]=e[n],r}function rt(t){let e,n=t[1],r=[];for(let e=0;e<n.length;e+=1)r[e]=ot(nt(t,n,e));return{c(){for(let t=0;t<r.length;t+=1)r[t].c();e=w()},m(t,n){for(let e=0;e<r.length;e+=1)r[e].m(t,n);m(t,e,n)},p(t,o){if(2&o){let i;for(n=t[1],i=0;i<n.length;i+=1){const s=nt(t,n,i);r[i]?r[i].p(s,o):(r[i]=ot(s),r[i].c(),r[i].m(e.parentNode,e))}for(;i<r.length;i+=1)r[i].d(1);r.length=n.length}},d(t){v(r,t),t&&g(e)}}}function ot(t){let e,n,r,o,i,s=t[5].token_str+"",a=t[5].score+"";return{c(){e=b("p"),n=y("BERT predicted "),r=y(s),o=y(" with a probability "),i=y(a)},m(t,s){m(t,e,s),d(e,n),d(e,r),d(e,o),d(e,i)},p(t,e){2&e&&s!==(s=t[5].token_str+"")&&_(r,s),2&e&&a!==(a=t[5].score+"")&&_(i,a)},d(t){t&&g(e)}}}function it(t){let e,n,o,i,a,l,u,c,f,h,p,v,y=t[1]&&rt(t);return{c(){e=b("div"),n=b("b"),n.textContent="Unmasker",o=x(),i=b("p"),i.textContent="Enter a sentence with a masked word and click the button to unmask it.",a=x(),l=b("form"),u=b("input"),c=x(),f=b("button"),f.textContent="Unmask",h=x(),y&&y.c(),$(u,"type","text"),$(u,"class","unmask-form-input"),$(u,"placeholder","The religion of a person who speaks Spanish is [MASK]."),$(f,"type","submit"),$(l,"class","unmask-form")},m(r,s){m(r,e,s),d(e,n),d(e,o),d(e,i),d(e,a),d(e,l),d(l,u),P(u,t[0]),d(l,c),d(l,f),d(e,h),y&&y.m(e,null),p||(v=[k(u,"input",t[3]),k(f,"click",t[2])],p=!0)},p(t,[n]){1&n&&u.value!==t[0]&&P(u,t[0]),t[1]?y?y.p(t,n):(y=rt(t),y.c(),y.m(e,null)):y&&(y.d(1),y=null)},i:r,o:r,d(t){t&&g(e),y&&y.d(),p=!1,s(v)}}}function st(t,e,n){let r="The religion of a person who speaks Spanish is [MASK].";const o=new et("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");var i=null;return[r,i,async function(t){t&&t.preventDefault(),n(1,i=await o.fillMask({model:"bert-base-uncased",inputs:r})),console.log(i)},function(){r=this.value,n(0,r)}]}var at=class extends J{constructor(t){super(),G(this,t,st,it,l,{})}};function lt(t,e,n){const r=t.slice();return r[5]=e[n],r}function ut(t){let e,n=t[1],r=[];for(let e=0;e<n.length;e+=1)r[e]=ct(lt(t,n,e));return{c(){for(let t=0;t<r.length;t+=1)r[t].c();e=w()},m(t,n){for(let e=0;e<r.length;e+=1)r[e].m(t,n);m(t,e,n)},p(t,o){if(2&o){let i;for(n=t[1],i=0;i<n.length;i+=1){const s=lt(t,n,i);r[i]?r[i].p(s,o):(r[i]=ct(s),r[i].c(),r[i].m(e.parentNode,e))}for(;i<r.length;i+=1)r[i].d(1);r.length=n.length}},d(t){v(r,t),t&&g(e)}}}function ct(t){let e,n,r,o,i,s=t[5].token_str+"",a=t[5].score+"";return{c(){e=b("p"),n=y("BERT predicted "),r=y(s),o=y(" with a probability "),i=y(a)},m(t,s){m(t,e,s),d(e,n),d(e,r),d(e,o),d(e,i)},p(t,e){2&e&&s!==(s=t[5].token_str+"")&&_(r,s),2&e&&a!==(a=t[5].score+"")&&_(i,a)},d(t){t&&g(e)}}}function dt(t){let e,n,o,i,a,l,u,c,f,h,p,v,y=t[1]&&ut(t);return{c(){e=b("div"),n=b("b"),n.textContent="Unmasker",o=x(),i=b("p"),i.textContent="Enter a sentence with a masked word and click the button to unmask it.",a=x(),l=b("form"),u=b("input"),c=x(),f=b("button"),f.textContent="Unmask",h=x(),y&&y.c(),$(u,"type","text"),$(u,"class","unmask-form-input"),$(u,"placeholder","The religion of a person who speaks Spanish is [MASK]."),$(f,"type","submit"),$(l,"class","unmask-form")},m(r,s){m(r,e,s),d(e,n),d(e,o),d(e,i),d(e,a),d(e,l),d(l,u),P(u,t[0]),d(l,c),d(l,f),d(e,h),y&&y.m(e,null),p||(v=[k(u,"input",t[3]),k(f,"click",t[2])],p=!0)},p(t,[n]){1&n&&u.value!==t[0]&&P(u,t[0]),t[1]?y?y.p(t,n):(y=ut(t),y.c(),y.m(e,null)):y&&(y.d(1),y=null)},i:r,o:r,d(t){t&&g(e),y&&y.d(),p=!1,s(v)}}}function ft(t,e,n){let r="The religion of a person who speaks Spanish is [MASK].";const o=new et("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");var i=null;return[r,i,async function(t){t&&t.preventDefault(),n(1,i=await o.fillMask({model:"bert-base-uncased",inputs:r})),console.log(i)},function(){r=this.value,n(0,r)}]}var ht=class extends J{constructor(t){super(),G(this,t,ft,dt,l,{})}};function pt(t){f(t,"svelte-1mpswk5",".unmask-form.svelte-1mpswk5{display:flex;gap:10px}.unmask-form-input.svelte-1mpswk5{flex-grow:1}")}function mt(t,e,n){const r=t.slice();return r[5]=e[n],r}function gt(t){let e,n,r,o=t[1],i=[];for(let e=0;e<o.length;e+=1)i[e]=vt(mt(t,o,e));return{c(){e=b("h3"),e.textContent="BERT Predictions:",n=x(),r=b("ul");for(let t=0;t<i.length;t+=1)i[t].c()},m(t,o){m(t,e,o),m(t,n,o),m(t,r,o);for(let t=0;t<i.length;t+=1)i[t].m(r,null)},p(t,e){if(2&e){let n;for(o=t[1],n=0;n<o.length;n+=1){const s=mt(t,o,n);i[n]?i[n].p(s,e):(i[n]=vt(s),i[n].c(),i[n].m(r,null))}for(;n<i.length;n+=1)i[n].d(1);i.length=o.length}},d(t){t&&g(e),t&&g(n),t&&g(r),v(i,t)}}}function vt(t){let e,n,r,o,i,s,a=t[5].token_str+"",l=t[5].score.toFixed(4)+"";return{c(){e=b("li"),n=y("BERT predicted "),r=b("strong"),o=y(a),i=y(" with a probability of "),s=y(l)},m(t,a){m(t,e,a),d(e,n),d(e,r),d(r,o),d(e,i),d(e,s)},p(t,e){2&e&&a!==(a=t[5].token_str+"")&&_(o,a),2&e&&l!==(l=t[5].score.toFixed(4)+"")&&_(s,l)},d(t){t&&g(e)}}}function bt(t){let e,n,o,i,a,l,u,c,f,h,p,v,y=t[1]&&gt(t);return{c(){e=b("div"),n=b("h2"),n.textContent="Unmasker",o=x(),i=b("p"),i.textContent="Enter a sentence with a masked word and click the button to unmask it.",a=x(),l=b("form"),u=b("input"),c=x(),f=b("button"),f.textContent="Unmask",h=x(),y&&y.c(),$(u,"type","text"),$(u,"class","unmask-form-input svelte-1mpswk5"),$(u,"placeholder","The religion of a person who speaks Spanish is [MASK]."),$(f,"type","submit"),$(l,"class","unmask-form svelte-1mpswk5")},m(r,s){m(r,e,s),d(e,n),d(e,o),d(e,i),d(e,a),d(e,l),d(l,u),P(u,t[0]),d(l,c),d(l,f),d(e,h),y&&y.m(e,null),p||(v=[k(u,"input",t[3]),k(f,"click",t[2])],p=!0)},p(t,[n]){1&n&&u.value!==t[0]&&P(u,t[0]),t[1]?y?y.p(t,n):(y=gt(t),y.c(),y.m(e,null)):y&&(y.d(1),y=null)},i:r,o:r,d(t){t&&g(e),y&&y.d(),p=!1,s(v)}}}function yt(t,e,n){let r="The religion of a person who speaks Spanish is [MASK].";const o=new et("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");let i=null;return[r,i,async function(t){t&&t.preventDefault(),n(1,i=await o.fillMask({model:"bert-base-uncased",inputs:r})),console.log(i)},function(){r=this.value,n(0,r)}]}var xt=class extends J{constructor(t){super(),G(this,t,yt,bt,l,{},pt)}};function wt(t,e,n){const r=t.slice();return r[27]=e[n],r}function kt(t,e,n){const r=t.slice();return r[30]=e[n],r}function $t(t){let e,n,o,i=t[30]+"";return{c(){e=b("option"),n=y(i),e.__value=o=t[30],e.value=e.__value},m(t,r){m(t,e,r),d(e,n)},p:r,d(t){t&&g(e)}}}function _t(t){let e,n,o,i=t[27]+"";return{c(){e=b("option"),n=y(i),e.__value=o=t[27],e.value=e.__value},m(t,r){m(t,e,r),d(e,n)},p:r,d(t){t&&g(e)}}}function Pt(t){let e,n,o,i,a,l,u,c,f,h,p,y,w,_,C,T,S,E,q,A,O,M=t[6],B=[];for(let e=0;e<M.length;e+=1)B[e]=$t(kt(t,M,e));let N=t[7],K=[];for(let e=0;e<N.length;e+=1)K[e]=_t(wt(t,N,e));return{c(){e=b("div"),n=b("form"),o=b("select");for(let t=0;t<B.length;t+=1)B[t].c();i=x(),a=b("select");for(let t=0;t<K.length;t+=1)K[t].c();l=x(),u=b("br"),c=x(),f=b("input"),h=x(),p=b("input"),y=x(),w=b("input"),_=x(),C=b("input"),T=x(),S=b("button"),S.textContent="Get Vectors",E=x(),q=b("figcaption"),q.textContent="See the vectors emebeddings in a lower dimension place. Select the Word emebeddiung mechanism and dimensionality reduction technique.",void 0===t[4]&&R(()=>t[9].call(o)),void 0===t[5]&&R(()=>t[10].call(a)),$(f,"type","text"),$(f,"placeholder","word1"),$(p,"type","text"),$(p,"placeholder","word2"),$(w,"type","text"),$(w,"placeholder","word3"),$(C,"type","text"),$(C,"placeholder","word4")},m(r,s){m(r,e,s),d(e,n),d(n,o);for(let t=0;t<B.length;t+=1)B[t].m(o,null);j(o,t[4]),d(n,i),d(n,a);for(let t=0;t<K.length;t+=1)K[t].m(a,null);j(a,t[5]),d(n,l),d(n,u),d(n,c),d(n,f),P(f,t[0]),d(n,h),d(n,p),P(p,t[1]),d(n,y),d(n,w),P(w,t[2]),d(n,_),d(n,C),P(C,t[3]),d(n,T),d(n,S),d(e,E),d(e,q),A||(O=[k(o,"change",t[9]),k(a,"change",t[10]),k(f,"input",t[11]),k(p,"input",t[12]),k(w,"input",t[13]),k(C,"input",t[14]),k(S,"click",t[8])],A=!0)},p(t,e){if(64&e[0]){let n;for(M=t[6],n=0;n<M.length;n+=1){const r=kt(t,M,n);B[n]?B[n].p(r,e):(B[n]=$t(r),B[n].c(),B[n].m(o,null))}for(;n<B.length;n+=1)B[n].d(1);B.length=M.length}if(80&e[0]&&j(o,t[4]),128&e[0]){let n;for(N=t[7],n=0;n<N.length;n+=1){const r=wt(t,N,n);K[n]?K[n].p(r,e):(K[n]=_t(r),K[n].c(),K[n].m(a,null))}for(;n<K.length;n+=1)K[n].d(1);K.length=N.length}160&e[0]&&j(a,t[5]),1&e[0]&&f.value!==t[0]&&P(f,t[0]),2&e[0]&&p.value!==t[1]&&P(p,t[1]),4&e[0]&&w.value!==t[2]&&P(w,t[2]),8&e[0]&&C.value!==t[3]&&P(C,t[3])},i:r,o:r,d(t){t&&g(e),v(B,t),v(K,t),A=!1,s(O)}}}function jt(t,e,n){var r,o,i,s="",a="Google Word2Vec",l="PCA",u=["Google Word2Vec","GloVe"],c=["PCA","t-SNE","UMAP"];var d=10,f=100,h=30,p=30,m=460-p-f,g=400-d-h;console.log("Hello from dataviz.js");var v=d3.select("#my_dataviz").append("svg").attr("width",m+p+f).attr("height",g+d+h).append("g").attr("transform","translate("+p+","+d+")");d3.select("#selectButton").selectAll("myOptions").data(["valueA","valueB","valueC"]).enter().append("option").text((function(t){return t})).attr("value",(function(t){return t}));var b=d3.scaleLinear().domain([0,10]).range([0,m]);v.append("g").attr("transform","translate(0,"+g+")").call(d3.axisBottom(b));var y=d3.scaleLinear().domain([0,20]).range([g,0]);v.append("g").call(d3.axisLeft(y));var x=v.append("g").append("path").datum(data).attr("d",d3.line().x((function(t){return b(+t.time)})).y((function(t){return y(+t.valueA)}))).attr("stroke","black").style("stroke-width",4).style("fill","none"),w=v.selectAll("circle").data(data).enter().append("circle").attr("cx",(function(t){return b(+t.time)})).attr("cy",(function(t){return y(+t.valueA)})).attr("r",7).style("fill","#69b3a2");return d3.select("#selectButton").on("change",(function(t){var e,n,r=d3.select(this).property("value");e=r,n=data.map((function(t){return{time:t.time,value:t[e]}})),x.datum(n).transition().duration(1e3).attr("d",d3.line().x((function(t){return b(+t.time)})).y((function(t){return y(+t.value)}))),w.data(n).transition().duration(1e3).attr("cx",(function(t){return b(+t.time)})).attr("cy",(function(t){return y(+t.value)}))})),[r,o,i,s,a,l,u,c,function(t){t.preventDefault(),console.log("vectorize",r,o,i,s,a,l)},function(){a=C(this),n(4,a),n(6,u)},function(){l=C(this),n(5,l),n(7,c)},function(){r=this.value,n(0,r)},function(){o=this.value,n(1,o)},function(){i=this.value,n(2,i)},function(){s=this.value,n(3,s)}]}var Ct=class extends J{constructor(t){super(),G(this,t,jt,Pt,l,{},null,[-1,-1])}};new W({target:document.getElementById("toc")}),new at({target:document.getElementById("image")}),new ht({target:document.getElementById("image1")}),new Ct({target:document.getElementById("vectors")}),new xt({target:document.getElementById("unmasker")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,